{
  "version": 3,
  "sources": ["../../../assets/typescript/events.ts", "../../../assets/typescript/toast.ts", "../../../assets/typescript/bookings.ts", "../../../assets/typescript/main.ts"],
  "sourcesContent": ["export const dispatchEvent = (element: HTMLElement, eventName: string, detail: any) => {\n    element.dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n", "const className = 'toast-container';\n\nconst createContainer = (): HTMLElement => {\n    const container = document.createElement('div');\n    container.className = className;\n    document.body.appendChild(container);\n    return container;\n}\n\nconst getContainer = (): HTMLElement => {\n    return document.querySelector(`.${className}`) || createContainer();\n}\n\nexport type ToastType = \"success\" | \"error\" | \"warn\" | \"info\";\n\nexport const toast = (message: string, type: ToastType = \"info\", duration: number = 3000) => {\n    const container = getContainer();\n    const toast = document.createElement('div');\n    toast.classList.add('toast', type);\n    toast.innerHTML = message;\n    container.appendChild(toast);\n    setTimeout(() => container.removeChild(toast), duration);\n}\n", "import { dispatchEvent } from \"./events\";\nimport { toast } from \"./toast\";\n\ndeclare global {\n    interface Window {\n        CSRFToken: string;\n    }\n}\n\nexport const moveBooking = (bookingElement: HTMLElement, bookingTarget: HTMLElement) => {\n    const container = bookingTarget.querySelector('.booking-group') || bookingTarget;\n    const parent = bookingElement.parentElement;\n    container.appendChild(bookingElement);\n\n    const { moveUrl } = bookingElement.dataset;\n    if (moveUrl) {\n        fetch(moveUrl, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': window.CSRFToken },\n            body: JSON.stringify({ to: bookingTarget.dataset.time })\n        })\n            .then((r) => r.ok ? r : Promise.reject(r))\n            .then(() => dispatchEvent(bookingTarget, 'booking-move', { id: bookingElement.dataset.id }))\n            .catch((err) => {\n                parent && parent.appendChild(bookingElement);\n                if (err.status !== 400) {\n                    toast(`Error: ${err.statusText}`, 'error');\n                } else {\n                    err.json().then((data) => toast(`Error: ${data.detail}`, 'error'));\n                }\n            });\n    }\n}\n", "import { moveBooking } from './bookings';\nimport { toast } from './toast';\n\ndeclare global {\n    interface Window {\n        moveBooking: typeof moveBooking;\n        toast: typeof toast;\n    }\n}\n\nwindow.moveBooking = moveBooking;\nwindow.toast = toast;\n"],
  "mappings": "MAAO,IAAMA,EAAgB,CAACC,EAAsBC,EAAmBC,IAAgB,CACnFF,EAAQ,cAAc,IAAI,YAAYC,EAAW,CAAE,OAAAC,CAAO,CAAC,CAAC,CAChE,ECFA,IAAMC,EAAY,kBAEZC,EAAkB,IAAmB,CACvC,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9C,OAAAA,EAAU,UAAYF,EACtB,SAAS,KAAK,YAAYE,CAAS,EAC5BA,CACX,EAEMC,EAAe,IACV,SAAS,cAAc,IAAIH,CAAS,EAAE,GAAKC,EAAgB,EAKzDG,EAAQ,CAACC,EAAiBC,EAAkB,OAAQC,EAAmB,MAAS,CACzF,IAAML,EAAYC,EAAa,EACzBC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAU,IAAI,QAASE,CAAI,EACjCF,EAAM,UAAYC,EAClBH,EAAU,YAAYE,CAAK,EAC3B,WAAW,IAAMF,EAAU,YAAYE,CAAK,EAAGG,CAAQ,CAC3D,ECbO,IAAMC,EAAc,CAACC,EAA6BC,IAA+B,CACpF,IAAMC,EAAYD,EAAc,cAAc,gBAAgB,GAAKA,EAC7DE,EAASH,EAAe,cAC9BE,EAAU,YAAYF,CAAc,EAEpC,GAAM,CAAE,QAAAI,CAAQ,EAAIJ,EAAe,QAC/BI,GACA,MAAMA,EAAS,CACX,OAAQ,MACR,QAAS,CAAE,eAAgB,mBAAoB,cAAe,OAAO,SAAU,EAC/E,KAAM,KAAK,UAAU,CAAE,GAAIH,EAAc,QAAQ,IAAK,CAAC,CAC3D,CAAC,EACI,KAAMI,GAAMA,EAAE,GAAKA,EAAI,QAAQ,OAAOA,CAAC,CAAC,EACxC,KAAK,IAAMC,EAAcL,EAAe,eAAgB,CAAE,GAAID,EAAe,QAAQ,EAAG,CAAC,CAAC,EAC1F,MAAOO,GAAQ,CACZJ,GAAUA,EAAO,YAAYH,CAAc,EACvCO,EAAI,SAAW,IACfC,EAAM,UAAUD,EAAI,UAAU,GAAI,OAAO,EAEzCA,EAAI,KAAK,EAAE,KAAME,GAASD,EAAM,UAAUC,EAAK,MAAM,GAAI,OAAO,CAAC,CAEzE,CAAC,CAEb,ECtBA,OAAO,YAAcC,EACrB,OAAO,MAAQC",
  "names": ["dispatchEvent", "element", "eventName", "detail", "className", "createContainer", "container", "getContainer", "toast", "message", "type", "duration", "moveBooking", "bookingElement", "bookingTarget", "container", "parent", "moveUrl", "r", "dispatchEvent", "err", "toast", "data", "moveBooking", "toast"]
}
