{
  "version": 3,
  "sources": ["../../../assets/typescript/toast.ts", "../../../assets/typescript/bookings.ts", "../../../assets/typescript/main.ts"],
  "sourcesContent": ["const className = 'toast-container';\n\nconst createContainer = (): HTMLElement => {\n    const container = document.createElement('div');\n    container.className = className;\n    document.body.appendChild(container);\n    return container;\n}\n\nconst getContainer = (): HTMLElement => {\n    return document.querySelector(`.${className}`) || createContainer();\n}\n\nexport type ToastType = \"success\" | \"error\" | \"warn\" | \"info\";\n\nexport const toast = (message: string, type: ToastType = \"info\", duration: number = 3000) => {\n    const container = getContainer();\n    const toast = document.createElement('div');\n    toast.classList.add('toast', type);\n    toast.innerHTML = message;\n    container.appendChild(toast);\n    setTimeout(() => container.removeChild(toast), duration);\n}\n", "import { dispatchEvent } from \"./events\";\nimport { toast } from \"./toast\";\n\ndeclare global {\n    interface Window {\n        CSRFToken: string;\n    }\n}\n\nexport const moveBooking = (bookingElement: HTMLElement, bookingTarget: HTMLElement) => {\n    return new Promise((resolve, _reject) => {\n        const container = bookingTarget.querySelector('.booking-group') || bookingTarget;\n        const parent = bookingElement.parentElement;\n        container.appendChild(bookingElement);\n\n        const reject = (reason: string) => {\n            toast(reason, \"error\");\n            _reject(reason);\n        }\n\n        const { moveUrl } = bookingElement.dataset;\n        if (moveUrl) {\n            fetch(moveUrl, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json', 'X-CSRFToken': window.CSRFToken },\n                body: JSON.stringify({ to: bookingTarget.dataset.time })\n            })\n                .then((response) => response.ok ? response : Promise.reject(response))\n                .then((response) => response.json())\n                .then((data) => resolve(data))\n                .catch((error) => {\n                    parent && parent.appendChild(bookingElement);\n                    if (error.status !== 400) {\n                        reject(`Error: ${error.statusText}`);\n                    } else {\n                        error.json().then((data) => reject(`Error: ${data.detail}`));\n                    }\n                });\n        }\n    });\n}\n", "import { moveBooking } from './bookings';\nimport { toast } from './toast';\n\ndeclare global {\n    interface Window {\n        moveBooking: typeof moveBooking;\n        toast: typeof toast;\n    }\n}\n\nwindow.moveBooking = moveBooking;\nwindow.toast = toast;\n"],
  "mappings": "MAAA,IAAMA,EAAY,kBAEZC,EAAkB,IAAmB,CACvC,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9C,OAAAA,EAAU,UAAYF,EACtB,SAAS,KAAK,YAAYE,CAAS,EAC5BA,CACX,EAEMC,EAAe,IACV,SAAS,cAAc,IAAIH,CAAS,EAAE,GAAKC,EAAgB,EAKzDG,EAAQ,CAACC,EAAiBC,EAAkB,OAAQC,EAAmB,MAAS,CACzF,IAAML,EAAYC,EAAa,EACzBC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAU,IAAI,QAASE,CAAI,EACjCF,EAAM,UAAYC,EAClBH,EAAU,YAAYE,CAAK,EAC3B,WAAW,IAAMF,EAAU,YAAYE,CAAK,EAAGG,CAAQ,CAC3D,ECbO,IAAMC,EAAc,CAACC,EAA6BC,IAC9C,IAAI,QAAQ,CAACC,EAASC,IAAY,CACrC,IAAMC,EAAYH,EAAc,cAAc,gBAAgB,GAAKA,EAC7DI,EAASL,EAAe,cAC9BI,EAAU,YAAYJ,CAAc,EAEpC,IAAMM,EAAUC,GAAmB,CAC/BC,EAAMD,EAAQ,OAAO,EACrBJ,EAAQI,CAAM,CAClB,EAEM,CAAE,QAAAE,CAAQ,EAAIT,EAAe,QAC/BS,GACA,MAAMA,EAAS,CACX,OAAQ,MACR,QAAS,CAAE,eAAgB,mBAAoB,cAAe,OAAO,SAAU,EAC/E,KAAM,KAAK,UAAU,CAAE,GAAIR,EAAc,QAAQ,IAAK,CAAC,CAC3D,CAAC,EACI,KAAMS,GAAaA,EAAS,GAAKA,EAAW,QAAQ,OAAOA,CAAQ,CAAC,EACpE,KAAMA,GAAaA,EAAS,KAAK,CAAC,EAClC,KAAMC,GAAST,EAAQS,CAAI,CAAC,EAC5B,MAAOC,GAAU,CACdP,GAAUA,EAAO,YAAYL,CAAc,EACvCY,EAAM,SAAW,IACjBN,EAAO,UAAUM,EAAM,UAAU,EAAE,EAEnCA,EAAM,KAAK,EAAE,KAAMD,GAASL,EAAO,UAAUK,EAAK,MAAM,EAAE,CAAC,CAEnE,CAAC,CAEb,CAAC,EC7BL,OAAO,YAAcE,EACrB,OAAO,MAAQC",
  "names": ["className", "createContainer", "container", "getContainer", "toast", "message", "type", "duration", "moveBooking", "bookingElement", "bookingTarget", "resolve", "_reject", "container", "parent", "reject", "reason", "toast", "moveUrl", "response", "data", "error", "moveBooking", "toast"]
}
