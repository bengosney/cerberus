{
  "version": 3,
  "sources": ["../../../assets/typescript/alias.ts", "../../../assets/typescript/toast.ts", "../../../assets/typescript/bookings.ts", "../../../assets/typescript/datetime.ts", "../../../assets/typescript/main.ts"],
  "sourcesContent": ["export const round = Math.round;\nexport const Document = document;\n", "import { Document } from \"./alias\";\n\nconst className = 'toast-container';\n\nconst createContainer = (): HTMLElement => {\n    const container = Document.createElement('div');\n    container.className = className;\n    Document.body.appendChild(container);\n    return container;\n}\n\nconst getContainer = (): HTMLElement => {\n    return Document.querySelector(`.${className}`) || createContainer();\n}\n\nexport type ToastType = \"success\" | \"error\" | \"warn\" | \"info\";\n\nexport const toast = (message: string, type: ToastType = \"info\", duration: number = 3000) => {\n    const container = getContainer();\n    const toast = Document.createElement('div');\n    toast.classList.add('toast', type);\n    toast.innerHTML = message;\n    container.appendChild(toast);\n\n    toast.addEventListener('click', () => toast.classList.add('remove'));\n    toast.addEventListener(\"animationend\", (event) => {\n        switch (event.animationName) {\n            case 'remove':\n                container.removeChild(toast);\n                break;\n            case 'add':\n                setTimeout(() => toast.classList.add('remove'), duration);\n                break;\n        }\n    });\n}\n", "import { dispatchEvent } from \"./events\";\nimport { toast } from \"./toast\";\n\ndeclare global {\n    interface Window {\n        CSRFToken: string;\n    }\n}\n\nconst makeRequest = async (url: string, body: object): Promise<object> => {\n    const response = await fetch(url, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json', 'X-CSRFToken': window.CSRFToken },\n        body: JSON.stringify(body)\n    });\n    const data = await response.json();\n    if (!response.ok || !data) {\n        const message = data.detail || response.statusText;\n        throw new Error(message);\n    }\n\n    return data;\n}\n\nexport const moveBooking = async (bookingElement: HTMLElement, bookingTarget: HTMLElement, containerSelector: string): Promise<object> => {\n    const container = bookingTarget.querySelector(containerSelector) || bookingTarget;\n    const parent = bookingElement.parentElement;\n\n    const { moveUrl } = bookingElement.dataset;\n    if (moveUrl) {\n        container.appendChild(bookingElement);\n\n        const { datetime } = bookingTarget.dataset;\n        try {\n            const data = await makeRequest(moveUrl, { to: datetime });\n            toast('Saved: OK', 'success');\n            return data;\n        } catch (error) {\n            parent && parent.appendChild(bookingElement);\n            toast(`${error}`, \"error\");\n            return {};\n        }\n    } else {\n        throw new Error(\"Move URL is not provided.\");\n    }\n}\n", "import { round } from './alias';\n\nexport const roundTime = (datetime: string, roundTo: number = 15): string => {\n    const rounded = new Date(datetime);\n\n    rounded.setMilliseconds(round(rounded.getMilliseconds() / 1000) * 1000);\n    rounded.setSeconds(round(rounded.getSeconds() / 60) * 60);\n    rounded.setMinutes(round(rounded.getMinutes() / roundTo) * roundTo);\n\n    return rounded.toISOString().slice(0,-8);\n}\n", "import { moveBooking } from './bookings';\nimport { toast } from './toast';\nimport { roundTime } from './datetime';\n\ndeclare global {\n    interface Window {\n        moveBooking: typeof moveBooking;\n        toast: typeof toast;\n        roundTime: typeof roundTime;\n    }\n}\n\nconst Window = window;\n\nwindow.moveBooking = moveBooking;\nwindow.toast = toast;\nwindow.roundTime = roundTime;\n"],
  "mappings": "MAAO,IAAMA,EAAQ,KAAK,MACbC,EAAW,SCCxB,IAAMC,EAAY,kBAEZC,EAAkB,IAAmB,CACvC,IAAMC,EAAYC,EAAS,cAAc,KAAK,EAC9C,OAAAD,EAAU,UAAYF,EACtBG,EAAS,KAAK,YAAYD,CAAS,EAC5BA,CACX,EAEME,EAAe,IACVD,EAAS,cAAc,IAAIH,CAAS,EAAE,GAAKC,EAAgB,EAKzDI,EAAQ,CAACC,EAAiBC,EAAkB,OAAQC,EAAmB,MAAS,CACzF,IAAMN,EAAYE,EAAa,EACzBC,EAAQF,EAAS,cAAc,KAAK,EAC1CE,EAAM,UAAU,IAAI,QAASE,CAAI,EACjCF,EAAM,UAAYC,EAClBJ,EAAU,YAAYG,CAAK,EAE3BA,EAAM,iBAAiB,QAAS,IAAMA,EAAM,UAAU,IAAI,QAAQ,CAAC,EACnEA,EAAM,iBAAiB,eAAiBI,GAAU,CAC9C,OAAQA,EAAM,cAAe,CACzB,IAAK,SACDP,EAAU,YAAYG,CAAK,EAC3B,MACJ,IAAK,MACD,WAAW,IAAMA,EAAM,UAAU,IAAI,QAAQ,EAAGG,CAAQ,EACxD,KACR,CACJ,CAAC,CACL,EC1BA,IAAME,EAAc,MAAOC,EAAaC,IAAkC,CACtE,IAAMC,EAAW,MAAM,MAAMF,EAAK,CAC9B,OAAQ,MACR,QAAS,CAAE,eAAgB,mBAAoB,cAAe,OAAO,SAAU,EAC/E,KAAM,KAAK,UAAUC,CAAI,CAC7B,CAAC,EACKE,EAAO,MAAMD,EAAS,KAAK,EACjC,GAAI,CAACA,EAAS,IAAM,CAACC,EAAM,CACvB,IAAMC,EAAUD,EAAK,QAAUD,EAAS,WACxC,MAAM,IAAI,MAAME,CAAO,CAC3B,CAEA,OAAOD,CACX,EAEaE,EAAc,MAAOC,EAA6BC,EAA4BC,IAA+C,CACtI,IAAMC,EAAYF,EAAc,cAAcC,CAAiB,GAAKD,EAC9DG,EAASJ,EAAe,cAExB,CAAE,QAAAK,CAAQ,EAAIL,EAAe,QACnC,GAAIK,EAAS,CACTF,EAAU,YAAYH,CAAc,EAEpC,GAAM,CAAE,SAAAM,CAAS,EAAIL,EAAc,QACnC,GAAI,CACA,IAAMJ,EAAO,MAAMJ,EAAYY,EAAS,CAAE,GAAIC,CAAS,CAAC,EACxD,OAAAC,EAAM,YAAa,SAAS,EACrBV,CACX,OAASW,EAAO,CACZ,OAAAJ,GAAUA,EAAO,YAAYJ,CAAc,EAC3CO,EAAM,GAAGC,CAAK,GAAI,OAAO,EAClB,CAAC,CACZ,CACJ,KACI,OAAM,IAAI,MAAM,2BAA2B,CAEnD,EC3CO,IAAMC,EAAY,CAACC,EAAkBC,EAAkB,KAAe,CACzE,IAAMC,EAAU,IAAI,KAAKF,CAAQ,EAEjC,OAAAE,EAAQ,gBAAgBC,EAAMD,EAAQ,gBAAgB,EAAI,GAAI,EAAI,GAAI,EACtEA,EAAQ,WAAWC,EAAMD,EAAQ,WAAW,EAAI,EAAE,EAAI,EAAE,EACxDA,EAAQ,WAAWC,EAAMD,EAAQ,WAAW,EAAID,CAAO,EAAIA,CAAO,EAE3DC,EAAQ,YAAY,EAAE,MAAM,EAAE,EAAE,CAC3C,ECIA,OAAO,YAAcE,EACrB,OAAO,MAAQC,EACf,OAAO,UAAYC",
  "names": ["round", "Document", "className", "createContainer", "container", "Document", "getContainer", "toast", "message", "type", "duration", "event", "makeRequest", "url", "body", "response", "data", "message", "moveBooking", "bookingElement", "bookingTarget", "containerSelector", "container", "parent", "moveUrl", "datetime", "toast", "error", "roundTime", "datetime", "roundTo", "rounded", "round", "moveBooking", "toast", "roundTime"]
}
