{
  "version": 3,
  "sources": ["../../../assets/typescript/toast.ts", "../../../assets/typescript/bookings.ts", "../../../assets/typescript/main.ts"],
  "sourcesContent": ["const className = 'toast-container';\n\nconst createContainer = (): HTMLElement => {\n    const container = document.createElement('div');\n    container.className = className;\n    document.body.appendChild(container);\n    return container;\n}\n\nconst getContainer = (): HTMLElement => {\n    return document.querySelector(`.${className}`) || createContainer();\n}\n\nexport type ToastType = \"success\" | \"error\" | \"warn\" | \"info\";\n\nexport const toast = (message: string, type: ToastType = \"info\", duration: number = 3000) => {\n    const container = getContainer();\n    const toast = document.createElement('div');\n    toast.classList.add('toast', type);\n    toast.innerHTML = message;\n    container.appendChild(toast);\n\n    toast.addEventListener('click', () => toast.classList.add('remove'));\n    toast.addEventListener(\"animationend\", (event) => {\n        switch (event.animationName) {\n            case 'remove':\n                container.removeChild(toast);\n                break;\n            case 'add':\n                setTimeout(() => toast.classList.add('remove'), duration);\n                break;\n        }\n    });\n}\n", "import { dispatchEvent } from \"./events\";\nimport { toast } from \"./toast\";\n\ndeclare global {\n    interface Window {\n        CSRFToken: string;\n    }\n}\n\nexport const moveBooking = async (bookingElement: HTMLElement, bookingTarget: HTMLElement) => {\n    const container = bookingTarget.querySelector('.booking-group') || bookingTarget;\n    const parent = bookingElement.parentElement;\n\n    const { moveUrl } = bookingElement.dataset;\n    if (moveUrl) {\n        container.appendChild(bookingElement);\n        const response = await fetch(moveUrl, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': window.CSRFToken },\n            body: JSON.stringify({ to: bookingTarget.dataset.time })\n        });\n        const data = await response.json();\n        if (!response.ok || !data) {\n            const message = data.detail || response.statusText;\n            parent && parent.appendChild(bookingElement);\n            toast(`Error: ${message}`, \"error\");\n            throw new Error(message);\n        }\n\n        toast('Updated', 'success');\n\n        return data;\n    } else {\n        throw new Error(\"Move URL is not provided.\");\n    }\n}\n", "import { moveBooking } from './bookings';\nimport { toast } from './toast';\n\ndeclare global {\n    interface Window {\n        moveBooking: typeof moveBooking;\n        toast: typeof toast;\n    }\n}\n\nwindow.moveBooking = moveBooking;\nwindow.toast = toast;\n"],
  "mappings": "MAAA,IAAMA,EAAY,kBAEZC,EAAkB,IAAmB,CACvC,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9C,OAAAA,EAAU,UAAYF,EACtB,SAAS,KAAK,YAAYE,CAAS,EAC5BA,CACX,EAEMC,EAAe,IACV,SAAS,cAAc,IAAIH,CAAS,EAAE,GAAKC,EAAgB,EAKzDG,EAAQ,CAACC,EAAiBC,EAAkB,OAAQC,EAAmB,MAAS,CACzF,IAAML,EAAYC,EAAa,EACzBC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAU,IAAI,QAASE,CAAI,EACjCF,EAAM,UAAYC,EAClBH,EAAU,YAAYE,CAAK,EAE3BA,EAAM,iBAAiB,QAAS,IAAMA,EAAM,UAAU,IAAI,QAAQ,CAAC,EACnEA,EAAM,iBAAiB,eAAiBI,GAAU,CAC9C,OAAQA,EAAM,cAAe,CACzB,IAAK,SACDN,EAAU,YAAYE,CAAK,EAC3B,MACJ,IAAK,MACD,WAAW,IAAMA,EAAM,UAAU,IAAI,QAAQ,EAAGG,CAAQ,EACxD,KACR,CACJ,CAAC,CACL,ECxBO,IAAME,EAAc,MAAOC,EAA6BC,IAA+B,CAC1F,IAAMC,EAAYD,EAAc,cAAc,gBAAgB,GAAKA,EAC7DE,EAASH,EAAe,cAExB,CAAE,QAAAI,CAAQ,EAAIJ,EAAe,QACnC,GAAII,EAAS,CACTF,EAAU,YAAYF,CAAc,EACpC,IAAMK,EAAW,MAAM,MAAMD,EAAS,CAClC,OAAQ,MACR,QAAS,CAAE,eAAgB,mBAAoB,cAAe,OAAO,SAAU,EAC/E,KAAM,KAAK,UAAU,CAAE,GAAIH,EAAc,QAAQ,IAAK,CAAC,CAC3D,CAAC,EACKK,EAAO,MAAMD,EAAS,KAAK,EACjC,GAAI,CAACA,EAAS,IAAM,CAACC,EAAM,CACvB,IAAMC,EAAUD,EAAK,QAAUD,EAAS,WACxC,MAAAF,GAAUA,EAAO,YAAYH,CAAc,EAC3CQ,EAAM,UAAUD,CAAO,GAAI,OAAO,EAC5B,IAAI,MAAMA,CAAO,CAC3B,CAEA,OAAAC,EAAM,UAAW,SAAS,EAEnBF,CACX,KACI,OAAM,IAAI,MAAM,2BAA2B,CAEnD,ECzBA,OAAO,YAAcG,EACrB,OAAO,MAAQC",
  "names": ["className", "createContainer", "container", "getContainer", "toast", "message", "type", "duration", "event", "moveBooking", "bookingElement", "bookingTarget", "container", "parent", "moveUrl", "response", "data", "message", "toast", "moveBooking", "toast"]
}
